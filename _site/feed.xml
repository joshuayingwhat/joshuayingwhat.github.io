<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>joshuayingwhat</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 13 Jul 2024 22:09:25 +0800</pubDate>
    <lastBuildDate>Sat, 13 Jul 2024 22:09:25 +0800</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>十:匿名binder</title>
        <description>
&lt;img src=&quot;https://raw.githubusercontent.com/joshuayingwhat/blog_resource/main/image/Untitled.png&quot; alt=&quot;&quot; /&gt;
匿名binder是要依托于实名binder而存在的。
当服务端通过实名binder向客户端传输一个匿名binder，客户端端会接收到一个匿名binder的引用然后可以向位于匿名binder进程发送数据。
在内核层匿名binder通过实名binder发送给驱动后，驱动会检查当前的flat_binder_obj是否在当前进程有binder_node。
</description>
        <pubDate>Mon, 08 Jul 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/07/08/%E5%8C%BF%E5%90%8Dbinder/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/07/08/%E5%8C%BF%E5%90%8Dbinder/</guid>
        
        <category>binder</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>一:图形硬件(Gralloc,Hardware Composer)</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#gralloc&quot; id=&quot;markdown-toc-gralloc&quot;&gt;&lt;strong&gt;gralloc&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

硬件抽象层统一了硬件调用的接口。

&lt;h2 id=&quot;gralloc&quot;&gt;&lt;strong&gt;gralloc&lt;/strong&gt;&lt;/h2&gt;
图形缓冲，用于保存图形的一段内存。图形缓冲运行在一个独立的进程.由它负责分配图形缓冲。
是一个独立的进程。gralloc对应的接口类
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAllocator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;allocate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BufferDescriptor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;descriptor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;generates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;kt&quot;&gt;uint32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stride&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
               &lt;span class=&quot;n&quot;&gt;vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
其中BufferDescriptor描述了申请的buffer的宽高格式等信息。count表示申请的缓冲区的个数。
IAllocator 的具体实现在pasthrough.cpp
</description>
        <pubDate>Tue, 02 Jul 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/07/02/%E5%9B%BE%E5%BD%A2%E7%A1%AC%E4%BB%B6/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/07/02/%E5%9B%BE%E5%BD%A2%E7%A1%AC%E4%BB%B6/</guid>
        
        <category>显示</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>一:Binder系统框架分析</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#rpc通信远程函数调用&quot; id=&quot;markdown-toc-rpc通信远程函数调用&quot;&gt;&lt;strong&gt;rpc通信:远程函数调用&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#clientbctestsvcmgr_lookup&quot; id=&quot;markdown-toc-clientbctestsvcmgr_lookup&quot;&gt;&lt;strong&gt;client（bctest.svcmgr_lookup）&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

整个binder框架有2部分组成一个是ipc通信一个是rpc通讯.
ipc通信机制的一般套路

源：a(client)

目的：b  (server)
&lt;ol&gt;
&lt;li&gt;b向servicemanager注册xx服务&lt;/li&gt;
&lt;li&gt;a向servicemanager查询xx服务，得到一个handle（handle就是指向的进程b）&lt;/li&gt;
&lt;/ol&gt;
数据本身:数据就是一个buffer，char[512] buffer

&lt;h3 id=&quot;rpc通信远程函数调用&quot;&gt;&lt;strong&gt;rpc通信:远程函数调用&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;调用哪一个函数：server的函数编个号&lt;/li&gt;

&lt;li&gt;传给它什么参数：传递server的参数就放在ipc的buffer中&lt;/li&gt;

&lt;li&gt;返回值：同样也是通过buffer传给client&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;clientbctestsvcmgr_lookup&quot;&gt;&lt;strong&gt;client（bctest.svcmgr_lookup）&lt;/strong&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;open驱动&lt;/li&gt;
&lt;li&gt;获取服务：向servicemanager查询服务得到一个指向目标进程的handle（这个handle就是目标进程server），target = 0 （表示目标进程是servicemanager）name就是client想要调用的服务 （函数）&lt;/li&gt;
&lt;/ol&gt;

&lt;img src=&quot;https://raw.githubusercontent.com/joshuayingwhat/blog_resource/main/image/bctest.c.png&quot; alt=&quot;&quot; /&gt;

同时SVC_MGR_GET_SERVICE也会被调用
通过handle发送数据，这个时候就会导致server从驱动中读取到数据
</description>
        <pubDate>Wed, 12 Jun 2024 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2024/06/12/binder%E6%A1%86%E6%9E%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90/</link>
        <guid isPermaLink="true">http://localhost:4000/2024/06/12/binder%E6%A1%86%E6%9E%B6%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90/</guid>
        
        <category>binder</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>指针数组和数组指针基础</title>
        <description>
近期对C语言关键的特性做一个复习。
</description>
        <pubDate>Sun, 15 Oct 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/10/15/point_array__array_point/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/10/15/point_array__array_point/</guid>
        
        <category>C基础</category>
        
        
        <category>C语言</category>
        
      </item>
    
  </channel>
</rss>
